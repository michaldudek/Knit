Vagrant.require_version ">= 1.7.0", "< 2.0.0"

# Make sure all dependencies are installed
[
    { :name => "vagrant-omnibus", :version => ">= 1.4.1" },
    { :name => "vagrant-berkshelf", :version => ">= 4.0.3" },
    { :name => "vagrant-cachier", :version => ">= 1.2.0"}
].each do |plugin|
    if not Vagrant.has_plugin?(plugin[:name], plugin[:version])
        raise "#{plugin[:name]} #{plugin[:version]} is required. Please run `vagrant plugin install #{plugin[:name]}`"
    end
end

Vagrant.configure("2") do |config|
    # install ubuntu
    config.vm.box = "chef/ubuntu-14.04"

    # configure network
    config.vm.hostname = "knit"
    config.vm.network "private_network", ip: "192.168.48.167", network: "255.255.0.0"

    # VirtualBox specific config - eg. composer memory problem
    config.vm.provider :virtualbox do |vb, override|
        override.vm.synced_folder "../../", "/knit", :nfs => true
        vb.customize ["modifyvm", :id, "--rtcuseutc", "on"]
        vb.customize ["modifyvm", :id, "--memory", 512]
        vb.customize ["modifyvm", :id, "--cpus", 1]
    end

    # fixed chef version to be sure that recipes are working
    config.omnibus.chef_version = :latest

    # enable caching in host machine
    config.cache.auto_detect = true
    config.cache.enable :apt
    config.cache.enable :chef
    config.cache.scope = :machine

    # chef recipes
    config.berkshelf.enabled = true

    config.vm.provision "chef_solo" do |chef|
        chef.run_list = [
            "recipe[apt]",
            "recipe[chef-hat::base]",
            "recipe[mongodb::10gen_repo]",
            "recipe[mongodb]",
            "recipe[mysql::server]",
            "recipe[chef-hat::php]",
            "recipe[chef-hat::php-composer]",
            "recipe[chef-hat::php-mongo]",
            "recipe[chef-hat::php-xdebug]"
        ]
        chef.json = {
            "mysql" => {
                "server_root_password" => "vagrant",
                "server_repl_password" => "vagrant",
                "server_debian_password" => "vagrant"
            },
            "php" => {
                "config" => {
                    "display_errors" => "On",
                    "date.timezone" => "Europe/Warsaw",
                    "opcache" => {
                        "enable" => 0 # disable opcache on dev machine
                    }
                }
            }
        }
    end

    # add ENV variables for Knit DB testing
    $install_env_vars = <<SCRIPT
echo Installing Knit ENV variables for DB testing...
declare -A env_vars
env_vars[MYSQL]=1
env_vars[MYSQL_USER]=root
env_vars[MYSQL_PASSWORD]=vagrant
env_vars[MYSQL_HOST]=127.0.0.1
env_vars[MYSQL_PORT]=3306
env_vars[MYSQL_DBNAME]=knit_test
env_vars[MONGODB]=1
env_vars[MONGODB_USER]=""
env_vars[MONGODB_PASSWORD]=""
env_vars[MONGODB_HOST]=127.0.0.1
env_vars[MONGODB_PORT]=27017
env_vars[MONGODB_DBNAME]=knit_test

source ~/.profile

for i in "${!env_vars[@]}"
do
    key=$i
    value=${env_vars[$i]}

    if [ -z "${!key}" ] || [ "${!key}" != $value ]
    then
        echo "export $key=$value" >> ~/.profile
    fi
done

SCRIPT

    config.vm.provision "shell", inline: $install_env_vars, privileged: false

end
